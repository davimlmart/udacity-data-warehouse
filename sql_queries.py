import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

IAM_ROLE = config.get("IAM_ROLE", "ARN")

HOST = config.get("CLUSTER","HOST")
DB_NAME = config.get("CLUSTER","DB_NAME")
DB_USER = config.get("CLUSTER","DB_USER")
DB_PASSWORD = config.get("CLUSTER","DB_PASSWORD")
DB_PORT = config.get("CLUSTER","DB_PORT")

LOG_DATA = config.get("S3","LOG_DATA")
LOG_JSONPATH = config.get("S3","LOG_JSONPATH")
SONG_DATA = config.get("S3","SONG_DATA")

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS events_dataset"
staging_songs_table_drop = "DROP TABLE IF EXISTS songs_dataset"
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS times"

# CREATE TABLES

staging_events_table_create= ("""
CREATE TABLE events_dataset (
  artist VARCHAR,
  auth VARCHAR,
  firstName VARCHAR,
  gender VARCHAR,
  itemInSession INTEGER,
  lastName VARCHAR,
  length DOUBLE PRECISION,
  level VARCHAR,
  location VARCHAR,
  method VARCHAR,
  page VARCHAR,
  registration BIGINT,
  sessionId INTEGER,
  song VARCHAR,
  status INTEGER,
  ts BIGINT,
  userAgent VARCHAR,
  userId INTEGER
)
""")

staging_songs_table_create = ("""
CREATE TABLE songs_dataset (
  num_songs INTEGER,
  artist_id VARCHAR,
  artist_latitude DOUBLE PRECISION,
  artist_longitude DOUBLE PRECISION,
  artist_location VARCHAR(512),
  artist_name VARCHAR(512),
  song_id VARCHAR,
  title VARCHAR(512),
  duration DOUBLE PRECISION,
  year INTEGER
)
""")

songplay_table_create = ("""
CREATE TABLE songplays (
songplay_id INTEGER GENERATED BY DEFAULT AS IDENTITY(1, 1) PRIMARY KEY, 
start_time TIMESTAMP, 
user_id INTEGER , 
level VARCHAR, 
song_id VARCHAR, 
artist_id VARCHAR, 
session_id INTEGER, 
location VARCHAR, 
user_agent VARCHAR
)
""")

user_table_create = ("""
CREATE TABLE users (
user_id INTEGER PRIMARY KEY, 
first_name VARCHAR, 
last_name VARCHAR, 
gender VARCHAR, 
level VARCHAR
)
""")

song_table_create = ("""
CREATE TABLE songs (
song_id VARCHAR PRIMARY KEY, 
title VARCHAR, 
artist_id VARCHAR, 
year INTEGER, 
duration DOUBLE PRECISION
)
""")

artist_table_create = ("""
CREATE TABLE artists (
artist_id VARCHAR PRIMARY KEY, 
name VARCHAR, 
location VARCHAR, 
latitude DOUBLE PRECISION, 
longitude DOUBLE PRECISION
)
""")

time_table_create = ("""
CREATE TABLE time (
start_time TIMESTAMP PRIMARY KEY, 
hour INTEGER, 
day INTEGER, 
week INTEGER, 
month INTEGER, 
year INTEGER, 
weekday INTEGER
)
""")

# STAGING TABLES

staging_events_copy = (f"""
COPY events_dataset
FROM '{LOG_DATA}'
CREDENTIALS 'aws_iam_role={IAM_ROLE}'
REGION 'us-west-2'
JSON '{LOG_JSONPATH}'
""")

staging_songs_copy = (f"""
COPY songs_dataset
FROM '{SONG_DATA}'
CREDENTIALS 'aws_iam_role={IAM_ROLE}'
REGION 'us-west-2'
JSON 'auto'
""")

# FINAL TABLES

songplay_table_insert = ("""
""")

user_table_insert = ("""
""")

song_table_insert = ("""
""")

artist_table_insert = ("""
""")

time_table_insert = ("""
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
