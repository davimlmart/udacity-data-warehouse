import configparser

#%% Config variables
config = configparser.ConfigParser()
config.read('dwh.cfg')

IAM_ROLE = config.get("IAM_ROLE", "ARN")

HOST = config.get("CLUSTER","HOST")
DB_NAME = config.get("CLUSTER","DB_NAME")
DB_USER = config.get("CLUSTER","DB_USER")
DB_PASSWORD = config.get("CLUSTER","DB_PASSWORD")
DB_PORT = config.get("CLUSTER","DB_PORT")

LOG_DATA = config.get("S3","LOG_DATA")
LOG_JSONPATH = config.get("S3","LOG_JSONPATH")
SONG_DATA = config.get("S3","SONG_DATA")

#%% Drop Tables

staging_events_table_drop = "DROP TABLE IF EXISTS events_dataset"
staging_songs_table_drop = "DROP TABLE IF EXISTS songs_dataset"
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS times"

#%% Create tables

staging_events_table_create= ("""
CREATE TABLE events_dataset (
  artist VARCHAR,
  auth VARCHAR,
  firstName VARCHAR,
  gender VARCHAR,
  itemInSession INTEGER,
  lastName VARCHAR,
  length DOUBLE PRECISION,
  level VARCHAR,
  location VARCHAR,
  method VARCHAR,
  page VARCHAR,
  registration BIGINT,
  sessionId INTEGER,
  song VARCHAR,
  status INTEGER,
  ts BIGINT,
  userAgent VARCHAR,
  userId INTEGER
)
""")

staging_songs_table_create = ("""
CREATE TABLE songs_dataset (
  num_songs INTEGER,
  artist_id VARCHAR,
  artist_latitude DOUBLE PRECISION,
  artist_longitude DOUBLE PRECISION,
  artist_location VARCHAR(512),
  artist_name VARCHAR(512),
  song_id VARCHAR,
  title VARCHAR(512),
  duration DOUBLE PRECISION,
  year INTEGER
)
""")

songplay_table_create = ("""
CREATE TABLE songplays (
songplay_id INTEGER GENERATED BY DEFAULT AS IDENTITY(1, 1) PRIMARY KEY, 
start_time TIMESTAMP, 
user_id INTEGER , 
level VARCHAR, 
song_id VARCHAR, 
artist_id VARCHAR, 
session_id INTEGER, 
location VARCHAR, 
user_agent VARCHAR
)
""")

user_table_create = ("""
CREATE TABLE users (
user_id INTEGER PRIMARY KEY, 
first_name VARCHAR, 
last_name VARCHAR, 
gender VARCHAR, 
level VARCHAR
)
""")

song_table_create = ("""
CREATE TABLE songs (
song_id VARCHAR PRIMARY KEY, 
title VARCHAR, 
artist_id VARCHAR, 
year INTEGER, 
duration DOUBLE PRECISION
)
""")

artist_table_create = ("""
CREATE TABLE artists (
artist_id VARCHAR PRIMARY KEY, 
name VARCHAR, 
location VARCHAR, 
latitude DOUBLE PRECISION, 
longitude DOUBLE PRECISION
)
""")

time_table_create = ("""
CREATE TABLE time (
start_time TIMESTAMP PRIMARY KEY, 
hour INTEGER, 
day INTEGER, 
week INTEGER, 
month INTEGER, 
year INTEGER, 
weekday INTEGER
)
""")

#%% Copy to staging tables

staging_events_copy = (f"""
COPY events_dataset
FROM '{LOG_DATA}'
CREDENTIALS 'aws_iam_role={IAM_ROLE}'
REGION 'us-west-2'
JSON '{LOG_JSONPATH}'
""")

staging_songs_copy = (f"""
COPY songs_dataset
FROM '{SONG_DATA}'
CREDENTIALS 'aws_iam_role={IAM_ROLE}'
REGION 'us-west-2'
JSON 'auto'
""")

#%% Insert analytic tables

songplay_table_insert = ("""
INSERT INTO songplays (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)
SELECT
    TIMESTAMP 'epoch' + (e.ts / 1000) * INTERVAL '1 second' AS start_time,
    e.userid AS user_id,
    e.level,
    s.song_id,
    s.artist_id,
    e.sessionid AS session_id,
    e.location,
    e.useragent AS user_agent
FROM events_dataset e
LEFT JOIN songs_dataset s ON (e.song = s.title AND e.artist = s.artist_name)
WHERE e.page = 'NextSong';
""")

user_table_insert = ("""
INSERT INTO users (user_id, first_name, last_name, gender, level)
SELECT 
    userid AS user_id,
    firstname AS first_name,
    lastname AS last_name,
    gender,
    level
FROM events_dataset
WHERE userid IS NOT NULL
GROUP BY 1, 2, 3, 4, 5;
""")

song_table_insert = ("""
INSERT INTO songs (song_id, title, artist_id, year, duration)
SELECT 
    song_id,
    title,
    artist_id,
    year,
    duration 
FROM songs_dataset
GROUP BY 1, 2, 3, 4, 5;
""")

artist_table_insert = ("""
INSERT INTO artists (artist_id, name, location, latitude, longitude)
SELECT 
    artist_id,
    artist_name AS name,
    artist_location AS location,
    artist_latitude AS latitude,
    artist_longitude AS longitude 
FROM songs_dataset
GROUP BY 1, 2, 3, 4, 5;
""")

time_table_insert = ("""
INSERT INTO time (start_time, hour, day, week, month, year, weekday)
WITH 
    formatted_ts AS (
        SELECT
            TIMESTAMP 'epoch' + (ts / 1000) * INTERVAL '1 second' AS start_time
        FROM events_dataset
        GROUP BY 1
        )
SELECT 
    start_time,
    EXTRACT(hour FROM start_time) AS hour,
    EXTRACT(day FROM start_time) AS day,
    EXTRACT(week FROM start_time) AS week,
    EXTRACT(month FROM start_time) AS month,
    EXTRACT(year FROM start_time) AS year,
    EXTRACT(weekday FROM start_time) AS weekday
FROM formatted_ts;
""")

#%% Quality Checks queries

staging_events_checks = ("""
SELECT 
  COUNT(*) AS total_lines 
FROM events_dataset
""")

staging_songs_checks = ("""
SELECT 
  COUNT(*) AS total_lines 
FROM songs_dataset
""")

songplays_checks = ("""
SELECT 
  COUNT(*) AS total_lines,
  SUM(CASE 
          WHEN user_id IS NULL THEN 1 
          ELSE 0 
      END) AS null_user_ids, 
  SUM(CASE 
          WHEN song_id IS NULL THEN 1 
          ELSE 0 
      END) AS null_song_ids,
  SUM(CASE 
          WHEN artist_id IS NULL THEN 1 
          ELSE 0 
      END) AS null_locations                
FROM songplays;
""")

users_checks = ("""
SELECT 
  COUNT(*) AS total_lines               
FROM users;
""")

songs_checks = ("""
SELECT 
  COUNT(*) AS total_lines,
  SUM(CASE 
          WHEN year IS NULL OR year = 0 THEN 1 
          ELSE 0 
      END) AS incomplete_years,
  SUM(CASE 
          WHEN artist_id IS NULL THEN 1 
          ELSE 0 
      END) AS null_artist_ids                  
FROM songs;
""")

artists_checks = ("""
SELECT 
  COUNT(*) AS total_lines,
  SUM(CASE 
          WHEN location IS NULL THEN 1 
          ELSE 0 
      END) AS null_locations        
FROM artists;
""")

time_checks = ("""
SELECT 
  COUNT(*) AS total_lines      
FROM time;
""")

#%% Final lists

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
quality_checks_queries = [staging_events_checks, staging_songs_checks, songplays_checks, users_checks, songs_checks, artists_checks, time_checks]